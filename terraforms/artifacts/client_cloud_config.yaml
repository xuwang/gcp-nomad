#cloud-config
coreos:
  etcd2:
    proxy: on
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001   
    initial-cluster: ${etcd_initial_cluster}
  fleet:
    public-ip: $private_ipv4
    metadata: "${fleet_tags}"
  units:
    - name: etcd2.service
      command: start
            EnvironmentFile=/etc/sysconfig/initial-cluster  
    - name: fleet.service
      command: start
    - name: format-disk.service
      command: start
      content: |
        [Unit]
        Description=Formats the disk drive
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        Environment="LABEL=var-lib-disk"
        Environment="DEV=/dev/sdb"
        # Do not wipe the disk if it's already being used, so the docker images persistent cross reboot.
        ExecStart=-/bin/bash -c "if ! findfs LABEL=$LABEL > /tmp/label.$LABEL; \
          then wipefs -a -f $DEV && mkfs.ext4 -T news -F -L $LABEL $DEV && echo wiped; fi"
    - name: var-lib-docker.mount
      command: start
      content: |
        [Unit]
        Description=Mount disk to /var/lib/docker
        Requires=format-disk.service
        After=format-disk.service
        Before=docker.service
        [Mount]
        What=/dev/sdb
        Where=/var/lib/docker
        Type=ext4
    - name: docker.service
      command: start
      drop-ins:
        - name: 60-docker-wait-for-disk.conf
          content: |
              [Unit]
              Requires=var-lib-docker.mount
              After=var-lib-dickor.mount
              [Service]
              Restart=always
              RestartSec=5
    - name: install-nomad.service
      command: start
      content: |
        [Unit]
        Description=Install Nomad
        [Service]
        Type=oneshot
        Environment="NOMAD_URL=https://releases.hashicorp.com/nomad/0.2.3/nomad_0.2.3_linux_amd64.zip"
        Environment="DES_DIR=/opt/bin/"
        ExecStart=/bin/bash -c "cd /tmp/ ; curl -sSL $NOMAD_URL -o nomad.zip && unzip nomad.zip && chmod a+x nomad \
          && mkdir -p $DES_DIR && mv nomad $DES_DIR && mkdir -p /etc/nomad.d && chmod a+w /etc/nomad.d"
    - name: nodeapp.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=nodeapp
        Require=docker.service
        After=docker.service
        [Service]
        ExecStartPre=-/usr/bin/docker rm -f nodeapp
        ExecStart=/bin/bash -c "docker run --rm --name nodeapp -p 80:8000 \
          -e COREOS_PUBLIC_IPV4=$public_ipv4 -e INSTANCE_ID=%H xueshanf/docker-nodeapp:latest"
        ExecStop=-/usr/bin/docker stop nodeapp
        RestartSec=5
        Restart=always
write_files:
  - path: /etc/nomad.d/client.hcl
    content: |
      # Increase log verbosity
      log_level = "INFO"
      
      # Setup data dir
      data_dir = "/var/lib/docker/nomad/client"
      
      # Enable the client
      client {
          enabled = true

          # Nomad servers
          # servers = ["127.0.0.1:4647"]
          
          # Set ourselves as thing one
          meta {
              ssd = "true"
          }
      }
  - path: /etc/profile.d/alias.sh
    content: |
        alias lal="ls -al"
        alias ll="ls -l"
        alias sd="sudo systemctl"
        alias sdl="sd list-units"
        alias sds="sd status"
        alias sdcat="sd cat"
        alias j="sudo journalctl"
        alias jfu="j -f -u"
        alias e="etcdctl"
        alias els="e ls --recursive"
        alias eget="e get"
        alias eset="e set"
        alias eok='e cluster-health'
        alias f="fleetctl -strict-host-key-checking=false"
        alias fcat="f cat"
        alias fss="f status"
        alias fst="f start"
        alias fdy="f destroy"
        alias flm="f list-machines"
        alias dk="docker "
        alias dkc="dk ps"
        alias dkm="dk images"
        alias dki="dk inspect"
        alias dkb="dk build"
        alias dke="dk exec"
        function dkip() { docker inspect --format "{{ .NetworkSettings.IPAddress }}" $1 ; }
        function dkid() { docker inspect --format "{{ .ID }}" $1 ; }
# end of files
# end of files




